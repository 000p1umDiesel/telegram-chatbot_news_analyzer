# notifier.py
from typing import Dict, Any, List
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from logger import get_logger
from services import data_manager
import asyncio
from datetime import datetime

logger = get_logger()


class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    @staticmethod
    def get_sentiment_emoji(sentiment: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        return {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
            sentiment, "ü§î"
        )

    @staticmethod
    def get_priority_emoji(hashtags: List[str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º."""
        high_priority = ["–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è", "–ø–æ–ª–∏—Ç–∏–∫–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"]
        if any(tag in high_priority for tag in hashtags):
            return "üî•"
        return "üì∞"

    @staticmethod
    def format_analysis_message(analysis_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–æ–≤–æ—Å—Ç–∏."""
        sentiment_emoji = NotificationTemplate.get_sentiment_emoji(
            analysis_data["sentiment"]
        )
        hashtags_list = (
            analysis_data.get("hashtags_formatted", "").replace("#", "").split()
        )
        priority_emoji = NotificationTemplate.get_priority_emoji(hashtags_list)

        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        channel_title = analysis_data["channel_title"]
        if len(channel_title) > 30:
            channel_title = channel_title[:27] + "..."

        message_text = (
            f"{priority_emoji} –ù–æ–≤–æ—Å—Ç—å –∏–∑ ¬´{channel_title}¬ª\n\n"
            f"üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{analysis_data['summary']}\n\n"
            f"üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment_emoji} {analysis_data['sentiment']}\n\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {analysis_data['hashtags_formatted']}\n\n"
            f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {analysis_data['message_link']}\n\n"
            f"‚è∞ {datetime.now().strftime('%H:%M')}"
        )

        return message_text

    @staticmethod
    def get_notification_keyboard(message_link: str) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=message_link)
        builder.adjust(1)
        return builder


class NotificationManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.stats = {
            "total_sent": 0,
            "total_failed": 0,
            "blocked_users": set(),
        }

    async def send_notification(self, analysis_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {analysis_data.get('channel_title')}")

        subscribers = data_manager.get_all_subscribers()
        if not subscribers:
            logger.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        message_text = NotificationTemplate.format_analysis_message(analysis_data)
        keyboard = NotificationTemplate.get_notification_keyboard(
            analysis_data["message_link"]
        )

        successful_sends = 0
        failed_sends = 0
        filtered_sends = 0

        for user_id in subscribers:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_id in self.stats["blocked_users"]:
                continue

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sentiment = analysis_data.get("sentiment")
                hashtags = analysis_data.get("hashtags", [])

                if not data_manager.should_send_notification(
                    user_id, sentiment, hashtags
                ):
                    filtered_sends += 1
                    continue

                await self.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                    reply_markup=keyboard.as_markup(),
                    disable_web_page_preview=True,
                )
                successful_sends += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
                await asyncio.sleep(0.05)

            except TelegramAPIError as e:
                failed_sends += 1
                error_msg = str(e).lower()

                if "bot was blocked" in error_msg or "user is deactivated" in error_msg:
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    )
                    self.stats["blocked_users"].add(user_id)
                    # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    data_manager.remove_subscriber(user_id)
                else:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                    )

            except Exception as e:
                failed_sends += 1
                logger.error(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_sent"] += successful_sends
        self.stats["total_failed"] += failed_sends

        logger.info(
            f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ‚úÖ {successful_sends}, "
            f"‚ùå {failed_sends}, üîá {filtered_sends} (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)"
        )

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        return {
            "total_sent": self.stats["total_sent"],
            "total_failed": self.stats["total_failed"],
            "blocked_users_count": len(self.stats["blocked_users"]),
            "success_rate": (
                self.stats["total_sent"]
                / (self.stats["total_sent"] + self.stats["total_failed"])
                if (self.stats["total_sent"] + self.stats["total_failed"]) > 0
                else 0
            ),
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
_notification_manager = None


def get_notification_manager(bot: Bot) -> NotificationManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global _notification_manager
    if _notification_manager is None:
        _notification_manager = NotificationManager(bot)
    return _notification_manager


async def send_analysis_result(bot: Bot, analysis_data: Dict[str, Any]):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    manager = get_notification_manager(bot)
    await manager.send_notification(analysis_data)


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def send_analysis_result_legacy(bot: Bot, analysis_data: Dict[str, Any]):
    """
    –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    """
    subscribers = data_manager.get_all_subscribers()
    if not subscribers:
        logger.info("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    sentiment_to_hashtag = {
        "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "#–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è_–Ω–æ–≤–æ—Å—Ç—å",
        "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "#–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è_–Ω–æ–≤–æ—Å—Ç—å",
        "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "#–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è_–Ω–æ–≤–æ—Å—Ç—å",
    }
    sentiment_hashtag = sentiment_to_hashtag.get(analysis_data["sentiment"], "#–Ω–æ–≤–æ—Å—Ç—å")

    message_text = (
        f"–ê–Ω–∞–ª–∏–∑ –∏–∑ ¬´{analysis_data['channel_title']}¬ª\n\n"
        f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{analysis_data['summary']}\n\n"
        f"–û—Ä–∏–≥–∏–Ω–∞–ª: {analysis_data['message_link']}\n\n"
        f"{analysis_data['hashtags_formatted']}\n"
        f"{sentiment_hashtag}"
    )

    successful_sends = 0
    for user_id in subscribers:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=None,
                disable_web_page_preview=True,
            )
            successful_sends += 1
        except TelegramAPIError as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            )
            if "bot was blocked" in str(e):
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
                )
                data_manager.remove_subscriber(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    logger.info(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {successful_sends}/{len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
    )
