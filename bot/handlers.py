# handlers.py - –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ —Å –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
import asyncio
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from services import llm_analyzer, tavily_search

from core.config import settings as config
from logger import get_logger
from typing import Dict, Any, List

from bot.notifier import send_analysis_result
from bot import bot

logger = get_logger()
dp = Dispatcher()


def get_simple_data_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–æ—Ç–∞."""
    try:
        from services.db.sync_pg_manager import get_sync_postgres_manager

        return get_sync_postgres_manager()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return None


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞"),
        types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        types.KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã"),
        types.KeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò"),
        types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫"),
        types.KeyboardButton(text="üì∞ –î–∞–π–¥–∂–µ—Å—Ç"),
        types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    )
    builder.adjust(2, 2, 2, 2)
    return builder.as_markup(resize_keyboard=True)


def get_subscription_keyboard(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    builder = InlineKeyboardBuilder()
    data_manager = get_simple_data_manager()

    if data_manager and data_manager.is_subscriber(chat_id):
        builder.button(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")
        builder.button(text="üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="my_settings")
    else:
        builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")

    builder.adjust(1)
    return builder.as_markup()


def get_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_stats"
        ),
        types.InlineKeyboardButton(
            text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings"
        ),
        types.InlineKeyboardButton(
            text="üé≠ –§–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="sentiment_filter"
        ),
        types.InlineKeyboardButton(
            text="üì∫ –§–∏–ª—å—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤", callback_data="channel_filter"
        ),
        types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache"),
    )
    builder.adjust(2)
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if not message.chat:
        return

    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "üî• **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–∞—Ç–∏–∫–∏\n"
        "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "üëá **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:**"
    )

    await message.answer(
        welcome_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard()
    )

    await message.answer(
        "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_subscription_keyboard(chat_id),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats_button(message: types.Message):
    await cmd_stats(message)


@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    await cmd_subscribe(message)


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings_button(message: types.Message):
    await cmd_settings(message)


@dp.message(F.text == "üìà –¢—Ä–µ–Ω–¥—ã")
async def handle_trends_button(message: types.Message):
    await cmd_trends(message)


@dp.message(F.text == "üí¨ –ß–∞—Ç —Å –ò–ò")
async def handle_chat_button(message: types.Message):
    await message.answer(
        "üí¨ **–ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º**\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/chat <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`",
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def handle_search_button(message: types.Message):
    await message.answer(
        "üîç **–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/web <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/web –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`",
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message(F.text == "üì∞ –î–∞–π–¥–∂–µ—Å—Ç")
async def handle_digest_button(message: types.Message):
    await cmd_digest(message)


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    await cmd_help(message)


# Callback handlers
@dp.callback_query(F.data == "subscribe")
async def process_callback_subscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    await callback_query.answer()

    if not callback_query.message:
        return

    data_manager = get_simple_data_manager()
    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    chat_id = callback_query.message.chat.id
    try:
        if data_manager.is_subscriber(chat_id):
            await callback_query.message.answer("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        else:
            data_manager.add_subscriber(chat_id)
            await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.")


@dp.callback_query(F.data == "unsubscribe")
async def process_callback_unsubscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É."""
    await callback_query.answer()

    if not callback_query.message:
        return

    data_manager = get_simple_data_manager()
    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    chat_id = callback_query.message.chat.id
    try:
        if not data_manager.is_subscriber(chat_id):
            await callback_query.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        else:
            data_manager.remove_subscriber(chat_id)
            await callback_query.message.answer("‚úÖ –û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.")


@dp.callback_query(F.data == "my_settings")
async def process_callback_my_settings(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()

    if not callback_query.message:
        return

    chat_id = callback_query.message.chat.id
    data_manager = get_simple_data_manager()

    if data_manager:
        settings = data_manager.get_user_settings(chat_id)
        is_subscribed = data_manager.is_subscriber(chat_id)

        text = (
            f"üìã **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
            f"üîî –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if is_subscribed else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
            f"üé≠ –§–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {settings.get('sentiment_filter', 'all')}\n"
            f"üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {len(config.channel_ids)}\n"
            f"üåê –Ø–∑—ã–∫: {settings.get('language', 'ru')}\n"
        )

        await callback_query.message.answer(text, parse_mode=ParseMode.MARKDOWN)


@dp.callback_query(F.data == "clear_cache")
async def process_callback_clear_cache(callback_query: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à."""
    await callback_query.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")
    try:
        llm_analyzer.clear_cache()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")


@dp.callback_query(F.data == "notification_settings")
async def process_callback_notification_settings(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await callback_query.answer()

    if not callback_query.message:
        return

    chat_id = callback_query.message.chat.id
    data_manager = get_simple_data_manager()

    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    settings = data_manager.get_user_settings(chat_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    builder = InlineKeyboardBuilder()
    current_enabled = settings.get("notification_enabled", True)

    builder.add(
        types.InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª' if current_enabled else '‚ùå –í—ã–∫–ª'}",
            callback_data=f"toggle_notifications_{not current_enabled}",
        )
    )

    text = (
        "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if current_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )

    await callback_query.message.answer(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("toggle_notifications_"))
async def process_toggle_notifications(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    await callback_query.answer()

    if not callback_query.message:
        return

    chat_id = callback_query.message.chat.id
    data_manager = get_simple_data_manager()

    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
    new_value = callback_query.data.split("_")[-1] == "True"

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = data_manager.update_user_settings(
        chat_id, {"notification_enabled": new_value}
    )

    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback_query.message.answer(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}!", parse_mode=ParseMode.MARKDOWN
        )
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


@dp.callback_query(F.data == "sentiment_filter")
async def process_callback_sentiment_filter(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    await callback_query.answer()

    if not callback_query.message:
        return

    chat_id = callback_query.message.chat.id
    data_manager = get_simple_data_manager()

    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    settings = data_manager.get_user_settings(chat_id)
    current_filter = settings.get("sentiment_filter", "all")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    builder = InlineKeyboardBuilder()

    filters = [
        ("all", "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        ("–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è", "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ"),
        ("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è", "üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ"),
        ("–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"),
    ]

    for filter_value, filter_name in filters:
        is_current = filter_value == current_filter
        button_text = f"{'‚úÖ ' if is_current else ''}{filter_name}"
        builder.add(
            types.InlineKeyboardButton(
                text=button_text, callback_data=f"set_sentiment_{filter_value}"
            )
        )

    builder.adjust(1)

    text = (
        "üé≠ **–§–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä: {dict(filters)[current_filter]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:"
    )

    await callback_query.message.answer(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("set_sentiment_"))
async def process_set_sentiment(callback_query: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    await callback_query.answer()

    if not callback_query.message:
        return

    chat_id = callback_query.message.chat.id
    data_manager = get_simple_data_manager()

    if not data_manager:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    sentiment_filter = callback_query.data.replace("set_sentiment_", "")

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = data_manager.update_user_settings(
        chat_id, {"sentiment_filter": sentiment_filter}
    )

    if success:
        filter_names = {
            "all": "–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        }
        await callback_query.message.answer(
            f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {filter_names.get(sentiment_filter, sentiment_filter)}!",
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


@dp.callback_query(F.data == "channel_filter")
async def process_callback_channel_filter(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤."""
    await callback_query.answer()

    if not callback_query.message:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    try:
        channels_info = []
        if hasattr(config, "channel_ids"):
            for channel_id in config.channel_ids:
                channels_info.append(f"üì∫ {channel_id}")

        if channels_info:
            text = (
                "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n"
                + "\n".join(channels_info[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                + (
                    f"\n\n... –∏ –µ—â–µ {len(channels_info) - 10}"
                    if len(channels_info) > 10
                    else ""
                )
                + "\n\nüí° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        else:
            text = "üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç."

        await callback_query.message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")


@dp.callback_query(F.data.startswith("hashtag_"))
async def process_hashtag_click(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ —Ö–µ—à—Ç–µ–≥—É."""
    await callback_query.answer()

    if not callback_query.message:
        return

    hashtag = callback_query.data.replace("hashtag_", "")

    try:
        data_manager = get_simple_data_manager()
        if not data_manager:
            await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º —Ö–µ—à—Ç–µ–≥–æ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è JSONB)
        news_with_hashtag = data_manager._execute(
            """
            SELECT a.summary, a.sentiment, m.channel_title, m.channel_username, m.message_id, m.channel_id
            FROM analyses a
            JOIN messages m ON a.message_id = m.message_id
            WHERE a.hashtags::jsonb ? %s
            ORDER BY m.date DESC
            LIMIT 5
            """,
            (hashtag,),
        )

        if not news_with_hashtag:
            await callback_query.message.answer(
                f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Å —Ö–µ—à—Ç–µ–≥–æ–º #{hashtag} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return

        response_text = f"üè∑Ô∏è –ù–æ–≤–æ—Å—Ç–∏ —Å —Ö–µ—à—Ç–µ–≥–æ–º #{hashtag}:\n\n"

        for i, news in enumerate(news_with_hashtag, 1):
            emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
                news.get("sentiment", ""), "üì∞"
            )

            response_text += (
                f"{i}. {emoji} {news.get('summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...\n"
            )
            response_text += (
                f"   üì∫ {news.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n\n"
            )

        response_text += "üëá **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:**"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        keyboard = get_hashtag_news_keyboard(news_with_hashtag, hashtag)

        await callback_query.message.answer(
            response_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ö–µ—à—Ç–µ–≥—É {hashtag}: {e}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ö–µ—à—Ç–µ–≥—É #{hashtag}.")


@dp.callback_query(F.data.startswith("hashtag_news_"))
async def process_hashtag_news_click(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤."""
    await callback_query.answer()

    if not callback_query.message:
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hashtag –∏ news_index –∏–∑ callback_data
        callback_data = callback_query.data.replace("hashtag_news_", "")
        parts = callback_data.rsplit("_", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É _
        if len(parts) != 2:
            await callback_query.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        hashtag = parts[0]
        news_index = int(parts[1])

        data_manager = get_simple_data_manager()
        if not data_manager:
            await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º —Ö–µ—à—Ç–µ–≥–æ–º –∑–∞–Ω–æ–≤–æ
        news_with_hashtag = data_manager._execute(
            """
            SELECT a.summary, a.sentiment, m.channel_title, m.channel_username, m.message_id, m.channel_id
            FROM analyses a
            JOIN messages m ON a.message_id = m.message_id
            WHERE a.hashtags::jsonb ? %s
            ORDER BY m.date DESC
            LIMIT 5
            """,
            (hashtag,),
        )

        if not news_with_hashtag or news_index >= len(news_with_hashtag):
            await callback_query.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        news = news_with_hashtag[news_index]
        emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
            news.get("sentiment", ""), "üì∞"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        news_text = f"{emoji} –ù–æ–≤–æ—Å—Ç—å –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ #{hashtag}\n\n"
        news_text += f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{news.get('summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        news_text += f"üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news.get('sentiment', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        news_text += f"üì∫ –ö–∞–Ω–∞–ª: {news.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_link = None
        if news.get("channel_username") and news.get("message_id"):
            username = news["channel_username"].lstrip("@")
            message_link = f"https://t.me/{username}/{news['message_id']}"
        elif news.get("channel_id") and news.get("message_id"):
            channel_id_str = str(news["channel_id"]).lstrip("-100")
            message_link = f"https://t.me/c/{channel_id_str}/{news['message_id']}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
        keyboard = InlineKeyboardBuilder()
        if message_link:
            keyboard.button(text="üîó –ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", url=message_link)
        keyboard.adjust(1)

        await callback_query.message.answer(
            news_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")


@dp.callback_query(F.data.startswith("news_"))
async def process_news_click(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ."""
    await callback_query.answer()

    if not callback_query.message:
        return

    try:
        news_index = int(callback_query.data.replace("news_", ""))

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
        data_manager = get_simple_data_manager()
        if not data_manager:
            await callback_query.message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        digest = data_manager.get_daily_digest()
        if not digest or not digest.get("news") or news_index >= len(digest["news"]):
            await callback_query.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        news = digest["news"][news_index]
        emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
            news.get("sentiment", ""), "üì∞"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        news_text = f"{emoji} –ù–æ–≤–æ—Å—Ç—å #{news_index + 1}\n\n"
        news_text += f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{news.get('summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        news_text += f"üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news.get('sentiment', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        news_text += f"üì∫ –ö–∞–Ω–∞–ª: {news.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if news.get("hashtags"):
            hashtags = news["hashtags"] if isinstance(news["hashtags"], list) else []
            if hashtags:
                hashtags_str = " ".join([f"#{tag}" for tag in hashtags[:5]])
                news_text += f"üè∑Ô∏è –¢–µ–≥–∏: {hashtags_str}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
        keyboard = InlineKeyboardBuilder()

        if news.get("message_link"):
            keyboard.button(text="üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å", url=news["message_link"])
        elif news.get("channel_username"):
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            username = news["channel_username"].lstrip("@")
            keyboard.button(
                text=f"üì± –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª @{username}", url=f"https://t.me/{username}"
            )

        await callback_query.message.answer(
            news_text, reply_markup=keyboard.as_markup(), disable_web_page_preview=True
        )

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@dp.callback_query(F.data == "system_stats")
async def process_callback_system_stats(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    await callback_query.answer()

    if not callback_query.message:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            cache_stats = llm_analyzer.get_cache_stats()
            cache_info = f"üíæ –ö—ç—à: {cache_stats.get('cache_size', 0)} –∑–∞–ø–∏—Å–µ–π"
        except Exception:
            cache_info = "üíæ –ö—ç—à: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        try:
            data_manager = get_simple_data_manager()
            subscribers_count = (
                len(data_manager.get_all_subscribers()) if data_manager else 0
            )
        except Exception:
            subscribers_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        try:
            channels_count = (
                len(config.channel_ids) if hasattr(config, "channel_ids") else 0
            )
        except Exception:
            channels_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            model_name = (
                config.OLLAMA_MODEL if hasattr(config, "OLLAMA_MODEL") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
        except Exception:
            model_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        try:
            interval = (
                config.CHECK_INTERVAL_SECONDS
                if hasattr(config, "CHECK_INTERVAL_SECONDS")
                else 60
            )
        except Exception:
            interval = 60

        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"ü§ñ –ë–æ—Ç: –û–Ω–ª–∞–π–Ω\n"
            f"üì∫ –ö–∞–Ω–∞–ª—ã: {channels_count}\n"
            f"üß† LLM –º–æ–¥–µ–ª—å: {str(model_name)}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers_count}\n"
            f"{cache_info}\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫"
        )

        await callback_query.message.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")


# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "`/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "`/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "`/trends` - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã\n"
        "`/digest` - –î–∞–π–¥–∂–µ—Å—Ç –∑–∞ –¥–µ–Ω—å\n\n"
        "**–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ò–ò:**\n"
        "`/chat <—Ç–µ–∫—Å—Ç>` - –û–±—â–µ–Ω–∏–µ —Å –ò–ò\n"
        "`/analyze <—Ç–µ–∫—Å—Ç>` - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞\n"
        "`/web <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
        "`/subscribe` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "`/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    if not message.chat:
        return

    await message.answer(
        "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_subscription_keyboard(message.chat.id),
    )


@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    await message.answer(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_settings_keyboard(),
    )


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    try:
        cache_stats = llm_analyzer.get_cache_stats()
        data_manager = get_simple_data_manager()
        subscribers_count = (
            len(data_manager.get_all_subscribers()) if data_manager else 0
        )

        status_text = (
            "‚úÖ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            f"ü§ñ **–ë–æ—Ç:** –û–Ω–ª–∞–π–Ω\n"
            f"üì∫ **–ö–∞–Ω–∞–ª—ã:** {', '.join(config.channel_ids[:3])}{'...' if len(config.channel_ids) > 3 else ''}\n"
            f"üß† **LLM –º–æ–¥–µ–ª—å:** {config.OLLAMA_MODEL}\n"
            f"üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:** {subscribers_count}\n"
            f"üíæ **–ö—ç—à:** {cache_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π ({cache_stats['cache_usage_percent']:.1f}%)\n"
            f"‚è± **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {config.CHECK_INTERVAL_SECONDS}—Å"
        )
        await message.answer(status_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π."""
    await send_typing_action(message)
    try:
        data_manager = get_simple_data_manager()
        if not data_manager:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        stats = data_manager.get_detailed_statistics()

        if not stats or stats.get("total_messages", 0) == 0:
            await message.answer(
                "ü§ñ **–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.**\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        await message.answer(
            format_statistics_message(stats), parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        await handle_command_error(message, e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(Command("chat"))
async def cmd_chat(message: types.Message, command: CommandObject):
    """–ß–∞—Ç —Å –ò–ò."""
    if not command.args:
        await message.answer(
            "ü§ñ **–ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/chat <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/chat –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    text = command.args
    await send_typing_action(message)

    progress_msg = await message.answer("ü§î –î—É–º–∞—é...")
    response = await llm_analyzer.get_chat_response(text)

    formatted_response = f"üí¨ **–û—Ç–≤–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:**\n\n{response}"
    await progress_msg.edit_text(formatted_response, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("analyze"))
async def cmd_analyze(message: types.Message, command: CommandObject):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not command.args:
        await message.answer(
            "üîç **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/analyze <—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/analyze –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞!`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    text_to_analyze = command.args
    await send_typing_action(message)
    progress = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

    analysis = await llm_analyzer.analyze_message(text_to_analyze)
    if analysis and analysis.summary:
        hashtags_str = (
            f"`{'`, `'.join(analysis.hashtags)}`" if analysis.hashtags else "–Ω–µ—Ç"
        )

        sentiment_emoji = {
            "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä",
            "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî",
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê",
        }.get(analysis.sentiment, "ü§î")

        response = (
            f"ü§ñ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
            f"üìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{analysis.summary}\n\n"
            f"üé≠ **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {sentiment_emoji} {analysis.sentiment}\n\n"
            f"üè∑Ô∏è **–¢–µ–≥–∏:**\n{hashtags_str}"
        )
        await progress.edit_text(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await progress.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@dp.message(Command("web"))
async def cmd_web(message: types.Message, command: CommandObject):
    """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    if not command.args:
        await message.answer(
            "üîç **–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/web <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/web –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    query = command.args
    await send_typing_action(message)
    progress = await message.answer(f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"...')

    search_results = await tavily_search.search(query)
    if search_results is None:
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tavily API.")
        return
    if not search_results:
        await progress.edit_text(f"ü§∑‚Äç‚ôÇÔ∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    formatted = tavily_search.format_search_results(search_results, query)

    try:
        await progress.edit_text(
            formatted, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ /web: {e}")
        simple_formatted = tavily_search.format_search_results_simple(
            search_results, query
        )
        await progress.edit_text(simple_formatted, disable_web_page_preview=True)


@dp.message(Command("trends"))
async def cmd_trends(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã."""
    await send_typing_action(message)
    progress = await message.answer("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã...")

    try:
        data_manager = get_simple_data_manager()
        if not data_manager:
            await progress.edit_text("‚ùå –°–µ—Ä–≤–∏—Å —Ç—Ä–µ–Ω–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        stats = data_manager.get_trends_statistics()

        if not stats or not stats.get("popular_hashtags"):
            await progress.edit_text("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.")
            return

        trends_text = "üìà **–¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:**\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
        for i, hashtag in enumerate(stats["popular_hashtags"][:5], 1):
            trends_text += f"{i}. #{hashtag}\n"

        if stats.get("top_channels"):
            trends_text += "\nüì∫ **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n"
            for channel in stats["top_channels"][:3]:
                trends_text += f"‚Ä¢ {channel.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({channel.get('count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"

        trends_text += "\nüëá **–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Ö–µ—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:**"

        await progress.edit_text(trends_text, parse_mode=ParseMode.MARKDOWN)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        hashtag_keyboard = get_hashtag_keyboard(stats["popular_hashtags"][:6])
        await message.answer(
            "üè∑Ô∏è **–ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏:**",
            reply_markup=hashtag_keyboard.as_markup(),
            parse_mode=ParseMode.MARKDOWN,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤.")


@dp.message(Command("digest"))
async def cmd_digest(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å."""
    await send_typing_action(message)
    progress = await message.answer("üì∞ –ì–æ—Ç–æ–≤–ª—é –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        data_manager = get_simple_data_manager()
        if not data_manager:
            await progress.edit_text("‚ùå –°–µ—Ä–≤–∏—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        digest = data_manager.get_daily_digest()

        if not digest or not digest.get("news"):
            await progress.edit_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        digest_text = f"üì∞ **–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {digest.get('date', '—Å–µ–≥–æ–¥–Ω—è')}**\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        positive_count = sum(
            1 for news in digest["news"] if news.get("sentiment") == "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è"
        )
        negative_count = sum(
            1 for news in digest["news"] if news.get("sentiment") == "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è"
        )
        neutral_count = len(digest["news"]) - positive_count - negative_count

        digest_text += f"üìä **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(digest['news'])}\n"
        digest_text += f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {positive_count} | üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negative_count} | üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {neutral_count}\n\n"

        # –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫)
        digest_text += "üî• **–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n"

        for i, news in enumerate(digest["news"][:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-8
            emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
                news.get("sentiment", ""), "üì∞"
            )

            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 80 —Å–∏–º–≤–æ–ª–æ–≤)
            summary = news.get("summary", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            short_summary = summary[:80] + "..." if len(summary) > 80 else summary

            digest_text += f"{i}. {emoji} {short_summary}\n"
            digest_text += f"   üì∫ {news.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:25]}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
        all_hashtags = []
        for news in digest["news"]:
            if news.get("hashtags"):
                hashtags = (
                    news["hashtags"] if isinstance(news["hashtags"], list) else []
                )
                all_hashtags.extend(hashtags)

        if all_hashtags:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ö–µ—à—Ç–µ–≥–æ–≤
            hashtag_counts = {}
            for tag in all_hashtags:
                hashtag_counts[tag] = hashtag_counts.get(tag, 0) + 1

            # –¢–æ–ø-5 —Ö–µ—à—Ç–µ–≥–æ–≤
            top_hashtags = sorted(
                hashtag_counts.items(), key=lambda x: x[1], reverse=True
            )[:5]
            if top_hashtags:
                digest_text += "üè∑Ô∏è **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:** "
                digest_text += " ".join([f"#{tag}" for tag, _ in top_hashtags])
                digest_text += "\n\n"

        digest_text += "üëá **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        keyboard = get_digest_keyboard(digest["news"][:8])

        await progress.edit_text(
            digest_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")


@dp.message(F.chat.type == "private")
async def handle_non_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —á–∞—Ç —Å –ò–ò."""
    if (
        message.text
        and not message.text.startswith("/")
        and not message.text
        in [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "üîî –ü–æ–¥–ø–∏—Å–∫–∞",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "üìà –¢—Ä–µ–Ω–¥—ã",
            "üí¨ –ß–∞—Ç —Å –ò–ò",
            "üîç –ü–æ–∏—Å–∫",
            "üì∞ –î–∞–π–¥–∂–µ—Å—Ç",
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        ]
    ):
        await send_typing_action(message)
        progress_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        response = await llm_analyzer.get_chat_response(message.text)
        formatted_response = f"üí¨ {response}"

        await progress_msg.edit_text(formatted_response)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_typing_action(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç'."""
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")


async def handle_command_error(message: types.Message, error: Exception, context: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–º–∞–Ω–¥."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {context}: {error}")
    await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {context}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def format_statistics_message(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    total_messages = stats.get("total_messages", 0)
    total_analyses = stats.get("total_analyses", 0)

    sentiment_stats = stats.get("sentiment_distribution", {})
    positive = sentiment_stats.get("–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è", 0)
    negative = sentiment_stats.get("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è", 0)
    neutral = sentiment_stats.get("–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", 0)

    top_hashtags = stats.get("popular_hashtags", [])[:5]
    top_channels = stats.get("top_channels", [])[:3]

    message_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:**\n\n"
        f"üì∞ **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}\n"
        f"üîç **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {total_analyses}\n\n"
        f"üé≠ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**\n"
        f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive}\n"
        f"üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative}\n"
        f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {neutral}\n\n"
    )

    if top_hashtags:
        message_text += "üè∑Ô∏è **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:**\n"
        for i, tag in enumerate(top_hashtags, 1):
            message_text += f"{i}. #{tag}\n"
        message_text += "\n"

    if top_channels:
        message_text += "üì∫ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n"
        for channel in top_channels:
            title = channel.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")[:30]
            count = channel.get("count", 0)
            message_text += f"‚Ä¢ {title}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    return message_text


def get_hashtag_keyboard(hashtags: List[str]) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    for hashtag in hashtags[:6]:  # –ú–∞–∫—Å–∏–º—É–º 6 —Ö–µ—à—Ç–µ–≥–æ–≤
        builder.button(text=f"#{hashtag}", callback_data=f"hashtag_{hashtag}")
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder


def get_hashtag_news_keyboard(
    news_list: List[Dict[str, Any]], hashtag: str
) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ö–µ—à—Ç–µ–≥—É."""
    builder = InlineKeyboardBuilder()

    for i, news in enumerate(news_list, 1):
        emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
            news.get("sentiment", ""), "üì∞"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ—Å—Ç–∏
        button_text = f"{emoji} {i}. –ß–∏—Ç–∞—Ç—å"
        builder.button(
            text=button_text,
            callback_data=f"hashtag_news_{hashtag}_{i-1}",  # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ (0-based)
        )

    builder.adjust(1)  # –ü–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder


def get_digest_keyboard(news_list: List[Dict[str, Any]]) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    builder = InlineKeyboardBuilder()

    for i, news in enumerate(news_list, 1):
        emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê"}.get(
            news.get("sentiment", ""), "üì∞"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = f"{emoji} {i}"

        builder.button(
            text=button_text, callback_data=f"news_{i-1}"  # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ (0-based)
        )

    builder.adjust(4)  # –ü–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder


@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤."""
    pass  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ monitoring_service.py
