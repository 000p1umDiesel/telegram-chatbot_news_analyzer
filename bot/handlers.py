# handlers.py
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from services import data_manager, llm_analyzer, tavily_search
import config
from logger import get_logger
from typing import Dict, Any

logger = get_logger()

dp = Dispatcher()


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞"),
    )
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


def get_subscription_keyboard(chat_id: int):
    builder = InlineKeyboardBuilder()
    if data_manager.is_subscriber(chat_id):
        builder.button(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="unsubscribe")
        builder.button(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
    else:
        builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="subscribe")
    builder.adjust(1)
    return builder.as_markup()


def get_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_stats"
        ),
        types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache"),
        types.InlineKeyboardButton(
            text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"
        ),
    )
    builder.adjust(1)
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    if not message.chat:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.")
        return

    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "üî• **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–∞—Ç–∏–∫–∏\n"
        "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
        "üìã **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É** `/help`\n\n"
        "üëá **–ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**"
    )

    await message.answer(
        welcome_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard()
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.answer(
        "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_subscription_keyboard(chat_id),
    )


@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞."""
    await cmd_subscribe(message)


@dp.callback_query(lambda c: c.data == "subscribe")
async def process_callback_subscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'."""
    if not callback_query.message:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
        return
    chat_id = callback_query.message.chat.id
    if data_manager.is_subscriber(chat_id):
        await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!")
    else:
        data_manager.add_subscriber(chat_id)
        await callback_query.answer("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        await callback_query.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(chat_id)
        )


@dp.callback_query(lambda c: c.data == "unsubscribe")
async def process_callback_unsubscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'."""
    if not callback_query.message:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
        return
    chat_id = callback_query.message.chat.id
    if not data_manager.is_subscriber(chat_id):
        await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
    else:
        data_manager.remove_subscriber(chat_id)
        await callback_query.answer("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        await callback_query.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(chat_id)
        )


@dp.callback_query(lambda c: c.data == "my_subscriptions")
async def process_callback_my_subscriptions(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not callback_query.message:
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        return

    chat_id = callback_query.message.chat.id
    is_subscribed = data_manager.is_subscriber(chat_id)

    subscription_info = (
        f"üìã **–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if is_subscribed else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
        f"üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {len(config.TELEGRAM_CHANNEL_IDS)}\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL_SECONDS} —Å–µ–∫."
    )

    await callback_query.answer()
    await callback_query.message.answer(
        subscription_info, parse_mode=ParseMode.MARKDOWN
    )


@dp.callback_query(lambda c: c.data == "clear_cache")
async def process_callback_clear_cache(callback_query: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    try:
        cache_stats_before = llm_analyzer.get_cache_stats()
        llm_analyzer.clear_cache()

        await callback_query.answer(
            f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {cache_stats_before['cache_size']} –∑–∞–ø–∏—Å–µ–π.",
            show_alert=True,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.", show_alert=True)


@dp.callback_query(lambda c: c.data == "system_stats")
async def process_callback_system_stats(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = llm_analyzer.get_cache_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_count = len(data_manager.get_all_subscribers())

        system_info = (
            f"üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers_count}\n"
            f"üíæ –ö—ç—à: {cache_stats['cache_size']}/{cache_stats['max_cache_size']} "
            f"({cache_stats['cache_usage_percent']:.1f}%)\n"
            f"üì∫ –ö–∞–Ω–∞–ª—ã: {len(config.TELEGRAM_CHANNEL_IDS)}\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {config.OLLAMA_MODEL}\n"
            f"üîó Ollama: {config.OLLAMA_BASE_URL}"
        )

        await callback_query.answer()
        await callback_query.message.answer(system_info, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True
        )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "`/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "`/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "`/subscribe` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "`/notifications` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "**–†–∞–±–æ—Ç–∞ —Å –ò–ò:**\n"
        "`/chat <—Ç–µ–∫—Å—Ç>` - –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "`/analyze <—Ç–µ–∫—Å—Ç>` - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "`/web <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
        "**–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    if not message.chat:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscribe –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.")
        return
    await message.answer(
        "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_subscription_keyboard(message.chat.id),
    )


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        cache_stats = llm_analyzer.get_cache_stats()
        subscribers_count = len(data_manager.get_all_subscribers())

        status_text = (
            "‚úÖ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            f"ü§ñ **–ë–æ—Ç:** –û–Ω–ª–∞–π–Ω\n"
            f"üì∫ **–ö–∞–Ω–∞–ª—ã:** {', '.join(config.TELEGRAM_CHANNEL_IDS[:3])}{'...' if len(config.TELEGRAM_CHANNEL_IDS) > 3 else ''}\n"
            f"üß† **LLM –º–æ–¥–µ–ª—å:** {config.OLLAMA_MODEL}\n"
            f"üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:** {subscribers_count}\n"
            f"üíæ **–ö—ç—à:** {cache_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π ({cache_stats['cache_usage_percent']:.1f}%)\n"
            f"‚è± **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {config.CHECK_INTERVAL_SECONDS}—Å"
        )
        await message.answer(status_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.bot:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    try:
        stats = data_manager.get_statistics()
        if not stats or stats.get("total_messages", 0) == 0:
            await message.answer(
                "üòî **–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.**\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        sentiment_counts = stats.get("sentiment_counts", {})
        hashtags = stats.get("popular_hashtags", [])

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = stats.get("total_messages", 0)
        positive = sentiment_counts.get("–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è", 0)
        negative = sentiment_counts.get("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è", 0)
        neutral = sentiment_counts.get("–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", 0)

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        pos_pct = (positive / total * 100) if total > 0 else 0
        neg_pct = (negative / total * 100) if total > 0 else 0
        neu_pct = (neutral / total * 100) if total > 0 else 0

        hashtags_str = f"`{'`, `'.join(hashtags[:10])}`" if hashtags else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        response = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:**\n\n"
            f"üìù **–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {total}\n\n"
            f"üéØ **–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**\n"
            f"üìà –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {positive} ({pos_pct:.1f}%)\n"
            f"üìâ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negative} ({neg_pct:.1f}%)\n"
            f"‚ûñ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {neutral} ({neu_pct:.1f}%)\n\n"
            f"üè∑Ô∏è **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:**\n"
            f"{hashtags_str}"
        )
        await message.answer(response, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(Command("chat"))
async def cmd_chat(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer(
            "üí¨ **–ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/chat <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/chat –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return
    text = command.args
    if message.bot:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    progress_msg = await message.answer("ü§î –î—É–º–∞—é...")
    response = await llm_analyzer.get_chat_response(text)

    formatted_response = f"üí¨ **–û—Ç–≤–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:**\n\n{response}"
    await progress_msg.edit_text(formatted_response, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("analyze"))
async def cmd_analyze(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer(
            "üîç **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/analyze <—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/analyze –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞!`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return
    text_to_analyze = command.args
    if message.bot:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

    analysis = await llm_analyzer.analyze_message(text_to_analyze)
    if analysis and analysis.summary:
        hashtags_str = (
            f"`{'`, `'.join(analysis.hashtags)}`" if analysis.hashtags else "–Ω–µ—Ç"
        )

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        sentiment_emoji = {
            "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä",
            "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòî",
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê",
        }.get(analysis.sentiment, "ü§î")

        response = (
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
            f"üìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{analysis.summary}\n\n"
            f"üé≠ **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {sentiment_emoji} {analysis.sentiment}\n\n"
            f"üè∑Ô∏è **–¢–µ–≥–∏:**\n{hashtags_str}"
        )
        await progress.edit_text(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await progress.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@dp.message(Command("web"))
async def cmd_web(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer(
            "üîç **–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/web <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/web –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`",
            parse_mode=ParseMode.MARKDOWN,
        )
        return
    query = command.args
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress = await message.answer(f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"...')

    search_results = await tavily_search.search(query)
    if search_results is None:
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tavily API.")
        return
    if not search_results:
        await progress.edit_text(f"ü§∑‚Äç‚ôÇÔ∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    formatted = tavily_search.format_search_results(search_results, query)
    await progress.edit_text(
        formatted, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
    )


@dp.message(F.chat.type == "private")
async def handle_non_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —á–∞—Ç —Å –ò–ò."""
    if message.text and not message.text.startswith("/"):
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        progress_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        response = await llm_analyzer.get_chat_response(message.text)
        formatted_response = f"üí¨ {response}"

        await progress_msg.edit_text(formatted_response)


@dp.message(Command("trends"))
async def cmd_trends(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã."""
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress = await message.answer("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã...")

    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = data_manager.get_extended_statistics()

        if not stats.get("popular_hashtags"):
            await progress.edit_text("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
        trends_text = "üìà **–¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:**\n\n"

        for i, hashtag in enumerate(stats["popular_hashtags"][:5], 1):
            trends_text += f"{i}. `#{hashtag}`\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–∞—Ö
        if stats.get("top_channels"):
            trends_text += "\nüì∫ **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n"
            for channel in stats["top_channels"][:3]:
                trends_text += f"‚Ä¢ {channel['channel_title']} ({channel['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"

        await progress.edit_text(trends_text, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤.")


@dp.message(Command("digest"))
async def cmd_digest(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å."""
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress = await message.answer("üì∞ –ì–æ—Ç–æ–≤–ª—é –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        from datetime import date

        today = date.today().isoformat()

        with data_manager._lock, data_manager.conn:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cur = data_manager.conn.execute(
                """
                SELECT a.summary, a.sentiment, a.hashtags, m.channel_title
                FROM analyses a
                JOIN messages m ON a.message_id = m.message_id
                WHERE DATE(m.date) = ?
                ORDER BY m.date DESC
                LIMIT 10
            """,
                (today,),
            )

            news_today = cur.fetchall()

        if not news_today:
            await progress.edit_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        positive_news = []
        negative_news = []
        neutral_news = []

        for news in news_today:
            if news["sentiment"] == "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è":
                positive_news.append(news)
            elif news["sentiment"] == "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è":
                negative_news.append(news)
            else:
                neutral_news.append(news)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest_text = f"üì∞ **–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {today}**\n\n"
        digest_text += f"üìä **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(news_today)}\n\n"

        if positive_news:
            digest_text += f"üòä **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ ({len(positive_news)}):**\n"
            for news in positive_news[:3]:
                summary = (
                    news["summary"][:80] + "..."
                    if len(news["summary"]) > 80
                    else news["summary"]
                )
                digest_text += f"‚Ä¢ {summary}\n"
            digest_text += "\n"

        if negative_news:
            digest_text += f"üòî **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ ({len(negative_news)}):**\n"
            for news in negative_news[:3]:
                summary = (
                    news["summary"][:80] + "..."
                    if len(news["summary"]) > 80
                    else news["summary"]
                )
                digest_text += f"‚Ä¢ {summary}\n"
            digest_text += "\n"

        if neutral_news:
            digest_text += f"üòê **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ ({len(neutral_news)}):**\n"
            for news in neutral_news[:2]:
                summary = (
                    news["summary"][:80] + "..."
                    if len(news["summary"]) > 80
                    else news["summary"]
                )
                digest_text += f"‚Ä¢ {summary}\n"

        await progress.edit_text(digest_text, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.")


@dp.message(Command("health"))
async def cmd_health(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress = await message.answer("üè• –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")

    try:
        from services.simple_health_check import simple_health_check

        stats = simple_health_check.get_basic_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç
        health_report = {
            "status": "healthy" if stats["database_ok"] else "warning",
            "current_metrics": {
                "uptime_hours": stats["uptime_hours"],
                "database_status": "healthy" if stats["database_ok"] else "unhealthy",
                "active_subscribers": stats["subscribers_count"],
            },
        }

        status_emoji = {
            "healthy": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "critical": "üî¥",
            "error": "‚ùå",
        }.get(health_report.get("status", "unknown"), "‚ùì")

        health_text = f"{status_emoji} **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health_report.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').upper()}**\n\n"

        if health_report.get("current_metrics"):
            metrics = health_report["current_metrics"]
            health_text += "üìä **–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
            health_text += f"üñ• CPU: {metrics.get('cpu_usage', 0):.1f}%\n"
            health_text += f"üíæ –ü–∞–º—è—Ç—å: {metrics.get('memory_usage', 0):.1f}%\n"
            health_text += f"üíø –î–∏—Å–∫: {metrics.get('disk_usage', 0):.1f}%\n"
            health_text += f"üß† –ö—ç—à LLM: {metrics.get('cache_usage', 0):.1f}%\n"
            health_text += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics.get('active_subscribers', 0)}\n"
            health_text += f"ü§ñ Ollama: {metrics.get('ollama_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            health_text += f"üóÑ –ë–î: {metrics.get('database_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

        if health_report.get("uptime_hours"):
            hours = health_report["uptime_hours"]
            health_text += f"‚è± **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {hours:.1f} —á\n\n"

        if health_report.get("warnings"):
            health_text += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in health_report["warnings"]:
                health_text += f"‚Ä¢ {warning}\n"
            health_text += "\n"

        if health_report.get("issues"):
            health_text += "üî¥ **–ü—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in health_report["issues"]:
                health_text += f"‚Ä¢ {issue}\n"

        await progress.edit_text(health_text, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.")


@dp.message(Command("quick"))
async def cmd_quick(message: types.Message, command: CommandObject):
    """–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã: /quick stats, /quick clear, /quick health."""
    if not command.args:
        help_text = (
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "`/quick stats` - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "`/quick health` - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "`/quick clear` - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à\n"
            "`/quick trends` - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã\n"
            "`/quick digest` - –î–∞–π–¥–∂–µ—Å—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        )
        await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)
        return

    action = command.args.lower()

    if action == "stats":
        await cmd_stats(message)
    elif action == "health":
        await cmd_health(message)
    elif action == "clear":
        try:
            cache_stats = llm_analyzer.get_cache_stats()
            llm_analyzer.clear_cache()
            await message.answer(
                f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {cache_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π."
            )
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.")
    elif action == "trends":
        await cmd_trends(message)
    elif action == "digest":
        await cmd_digest(message)
    else:
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quick` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∫–∞"


@dp.message(Command("notifications"))
async def cmd_notifications(message: types.Message, command: CommandObject):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if not message.chat:
        return

    chat_id = message.chat.id

    if not command.args:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = data_manager.is_subscriber(chat_id)

        if not is_subscribed:
            help_text = (
                "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
                "‚ùå **–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!**\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å:\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîî **–ü–æ–¥–ø–∏—Å–∫–∞** –Ω–∏–∂–µ\n"
                "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/subscribe`\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            )
            await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        settings = data_manager.get_user_settings(chat_id)

        notifications_status = (
            "üîî –í–∫–ª—é—á–µ–Ω—ã"
            if settings.get("notification_enabled", True)
            else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
        )

        sentiment_names = {
            "all": "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "positive": "–¢–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ",
            "negative": "–¢–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ",
            "neutral": "–¢–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ",
        }
        sentiment_filter = sentiment_names.get(
            settings.get("sentiment_filter", "all"), "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"
        )

        help_text = (
            f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
            f"‚úÖ **–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n"
            f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {sentiment_filter}\n\n"
            f"**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
            f"`/notifications on` - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"`/notifications off` - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"`/notifications all` - –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            f"`/notifications positive` - –¢–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ\n"
            f"`/notifications negative` - –¢–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ\n"
            f"`/notifications neutral` - –¢–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ\n\n"
            f"**–ü—Ä–∏–º–µ—Ä:** `/notifications positive`"
        )

        await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)
        return

    args = command.args.lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if args == "on":
        success = data_manager.update_user_settings(
            chat_id, {"notification_enabled": True}
        )
        if success:
            await message.answer(
                "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!**", parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    elif args == "off":
        success = data_manager.update_user_settings(
            chat_id, {"notification_enabled": False}
        )
        if success:
            await message.answer(
                "üîï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!**", parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    elif args in ["all", "positive", "negative", "neutral"]:
        success = data_manager.update_user_settings(chat_id, {"sentiment_filter": args})
        if success:
            filter_names = {
                "all": "–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏",
                "positive": "—Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                "negative": "—Ç–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                "neutral": "—Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            }
            await message.answer(
                f"üéØ **–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:** {filter_names[args]}",
                parse_mode=ParseMode.MARKDOWN,
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    else:
        await message.answer(
            "‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/notifications` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode=ParseMode.MARKDOWN,
        )
