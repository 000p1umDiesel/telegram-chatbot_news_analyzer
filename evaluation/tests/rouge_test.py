#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ROUGE –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.
"""

from typing import List, Dict, Any
import numpy as np
from rouge_score import rouge_scorer
from .base_evaluator import BaseEvaluator


class ROUGETest(BaseEvaluator):
    """–¢–µ—Å—Ç ROUGE –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""

    def __init__(self, db_config: dict = None):
        super().__init__(db_config)
        self.rouge_scorer = rouge_scorer.RougeScorer(
            ["rouge1", "rouge2", "rougeL"], use_stemmer=True
        )

    def run_test(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ ROUGE —Ç–µ—Å—Ç–æ–≤."""
        print("üîç –ó–∞–ø—É—Å–∫ ROUGE –º–µ—Ç—Ä–∏–∫...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ —Å–∞–º–º–∞—Ä–∏
        texts = [item["text"] for item in data]
        summaries = [item["summary"] for item in data]

        # –í—ã—á–∏—Å–ª—è–µ–º ROUGE –º–µ—Ç—Ä–∏–∫–∏
        rouge_results = self._compute_rouge_scores(texts, summaries)

        self.results["metrics"] = rouge_results
        self.results["details"] = {
            "samples_processed": len(data),
            "average_text_length": np.mean([len(text) for text in texts]),
            "average_summary_length": np.mean([len(summary) for summary in summaries]),
        }

        return self.results

    def _compute_rouge_scores(
        self, texts: List[str], summaries: List[str]
    ) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ ROUGE –º–µ—Ç—Ä–∏–∫."""
        rouge_1_scores = []
        rouge_2_scores = []
        rouge_l_scores = []

        for text, summary in zip(texts, summaries):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω
            sentences = text.split(".")[:3]  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            reference = ". ".join(sentences).strip()

            if reference and summary:
                scores = self.rouge_scorer.score(reference, summary)
                rouge_1_scores.append(scores["rouge1"].fmeasure)
                rouge_2_scores.append(scores["rouge2"].fmeasure)
                rouge_l_scores.append(scores["rougeL"].fmeasure)

        return {
            "rouge_1_mean": np.mean(rouge_1_scores) if rouge_1_scores else 0.0,
            "rouge_1_std": np.std(rouge_1_scores) if rouge_1_scores else 0.0,
            "rouge_2_mean": np.mean(rouge_2_scores) if rouge_2_scores else 0.0,
            "rouge_2_std": np.std(rouge_2_scores) if rouge_2_scores else 0.0,
            "rouge_l_mean": np.mean(rouge_l_scores) if rouge_l_scores else 0.0,
            "rouge_l_std": np.std(rouge_l_scores) if rouge_l_scores else 0.0,
            "samples_count": len(rouge_1_scores),
        }

    def _generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ ROUGE —Ç–µ—Å—Ç–∞."""
        metrics = self.results["metrics"]
        rouge_1 = metrics.get("rouge_1_mean", 0)
        rouge_2 = metrics.get("rouge_2_mean", 0)
        rouge_l = metrics.get("rouge_l_mean", 0)

        return f"ROUGE-1: {rouge_1:.3f}, ROUGE-2: {rouge_2:.3f}, ROUGE-L: {rouge_l:.3f}"

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ROUGE –º–µ—Ç—Ä–∏–∫."""
        metrics = self.results["metrics"]
        recommendations = []

        rouge_1 = metrics.get("rouge_1_mean", 0)
        rouge_2 = metrics.get("rouge_2_mean", 0)
        rouge_l = metrics.get("rouge_l_mean", 0)

        if rouge_1 < 0.3:
            recommendations.append(
                "ROUGE-1 –Ω–∏–∑–∫–∏–π - —É–ª—É—á—à–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
            )

        if rouge_2 < 0.2:
            recommendations.append(
                "ROUGE-2 –Ω–∏–∑–∫–∏–π - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –±–∏–≥—Ä–∞–º–º –≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"
            )

        if rouge_l < 0.25:
            recommendations.append(
                "ROUGE-L –Ω–∏–∑–∫–∏–π - —É–ª—É—á—à–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º"
            )

        if all(score > 0.4 for score in [rouge_1, rouge_2, rouge_l]):
            recommendations.append(
                "–û—Ç–ª–∏—á–Ω—ã–µ ROUGE –º–µ—Ç—Ä–∏–∫–∏! –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"
            )

        return recommendations
