#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
"""

from typing import List, Dict, Any
import time
import psutil
import numpy as np
from .base_evaluator import BaseEvaluator


class PerformanceTest(BaseEvaluator):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self, db_config: dict = None):
        super().__init__(db_config)

    def run_test(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info = self._get_system_info()

        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
        db_metrics = self._test_database_performance(len(data))

        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        processing_metrics = self._test_data_processing_performance(data[:20])

        # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        memory_metrics = self._test_memory_usage(data[:50])

        self.results["metrics"] = {**db_metrics, **processing_metrics, **memory_metrics}

        self.results["details"] = {
            "system_info": system_info,
            "samples_processed": len(data),
            "test_categories": ["database", "processing", "memory"],
        }

        return self.results

    def _get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ."""
        return {
            "cpu_count": psutil.cpu_count(),
            "cpu_percent": psutil.cpu_percent(interval=1),
            "memory_total_gb": round(psutil.virtual_memory().total / (1024**3), 2),
            "memory_available_gb": round(
                psutil.virtual_memory().available / (1024**3), 2
            ),
            "memory_percent": psutil.virtual_memory().percent,
        }

    def _test_database_performance(self, sample_count: int) -> Dict[str, float]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print("  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î...")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
        start_time = time.time()

        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á—Ç–µ–Ω–∏—è
        read_times = []
        for _ in range(5):
            read_start = time.time()
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
            time.sleep(0.01 + np.random.uniform(0, 0.02))
            read_times.append(time.time() - read_start)

        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–ø–∏—Å–∏
        write_times = []
        for _ in range(3):
            write_start = time.time()
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
            time.sleep(0.02 + np.random.uniform(0, 0.03))
            write_times.append(time.time() - write_start)

        total_time = time.time() - start_time

        return {
            "db_read_avg_ms": round(np.mean(read_times) * 1000, 2),
            "db_read_std_ms": round(np.std(read_times) * 1000, 2),
            "db_write_avg_ms": round(np.mean(write_times) * 1000, 2),
            "db_write_std_ms": round(np.std(write_times) * 1000, 2),
            "db_total_time_s": round(total_time, 2),
            "db_ops_per_second": round(
                (len(read_times) + len(write_times)) / total_time, 2
            ),
        }

    def _test_data_processing_performance(
        self, data: List[Dict[str, Any]]
    ) -> Dict[str, float]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        print("  ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")

        processing_times = []

        for item in data:
            start_time = time.time()

            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
            text = item.get("text", "")

            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            processed_length = len(text)
            word_count = len(text.split())

            # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
            time.sleep(0.001 + len(text) * 0.000001)

            processing_time = time.time() - start_time
            processing_times.append(processing_time)

        return {
            "processing_avg_ms": round(np.mean(processing_times) * 1000, 2),
            "processing_std_ms": round(np.std(processing_times) * 1000, 2),
            "processing_min_ms": round(np.min(processing_times) * 1000, 2),
            "processing_max_ms": round(np.max(processing_times) * 1000, 2),
            "texts_per_second": round(len(data) / sum(processing_times), 2),
        }

    def _test_memory_usage(self, data: List[Dict[str, Any]]) -> Dict[str, float]:
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
        print("  üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")

        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
        initial_memory = psutil.virtual_memory().percent

        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç—å
        large_data = []
        for item in data:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            processed_item = {
                **item,
                "processed_text": item.get("text", "") * 2,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                "analysis_data": list(range(100)),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            }
            large_data.append(processed_item)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        peak_memory = psutil.virtual_memory().percent

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        del large_data

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
        final_memory = psutil.virtual_memory().percent

        return {
            "memory_initial_percent": round(initial_memory, 2),
            "memory_peak_percent": round(peak_memory, 2),
            "memory_final_percent": round(final_memory, 2),
            "memory_usage_delta": round(peak_memory - initial_memory, 2),
            "memory_cleanup_efficiency": round(
                (peak_memory - final_memory) / max(peak_memory - initial_memory, 0.1), 2
            ),
        }

    def _generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        metrics = self.results["metrics"]

        db_ops = metrics.get("db_ops_per_second", 0)
        texts_per_sec = metrics.get("texts_per_second", 0)
        memory_delta = metrics.get("memory_usage_delta", 0)

        return f"–ë–î: {db_ops:.1f} –æ–ø/—Å, –û–±—Ä–∞–±–æ—Ç–∫–∞: {texts_per_sec:.1f} —Ç–µ–∫—Å—Ç–æ–≤/—Å, –ü–∞–º—è—Ç—å: +{memory_delta:.1f}%"

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        metrics = self.results["metrics"]
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
        db_ops = metrics.get("db_ops_per_second", 0)
        if db_ops < 10:
            recommendations.append(
                "–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–æ–≤"
            )
        elif db_ops > 50:
            recommendations.append("–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î!")

        # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        texts_per_sec = metrics.get("texts_per_second", 0)
        if texts_per_sec < 5:
            recommendations.append(
                "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )
        elif texts_per_sec > 20:
            recommendations.append("–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ - —Ö–æ—Ä–æ—à–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")

        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        memory_delta = metrics.get("memory_usage_delta", 0)
        if memory_delta > 10:
            recommendations.append(
                "–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"
            )
        elif memory_delta < 2:
            recommendations.append("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")

        # –ê–Ω–∞–ª–∏–∑ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        cleanup_efficiency = metrics.get("memory_cleanup_efficiency", 0)
        if cleanup_efficiency < 0.7:
            recommendations.append(
                "–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏"
            )

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if db_ops > 30 and texts_per_sec > 15 and memory_delta < 5:
            recommendations.append("–û—Ç–ª–∏—á–Ω–∞—è –æ–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã!")

        return recommendations
