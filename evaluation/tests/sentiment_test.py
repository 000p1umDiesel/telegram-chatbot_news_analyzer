#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞: —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å.
"""

from typing import List, Dict, Any
import numpy as np
from collections import Counter
from .base_evaluator import BaseEvaluator


class SentimentTest(BaseEvaluator):
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞."""

    def __init__(self, db_config: dict = None):
        super().__init__(db_config)
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ sentiment
        self.positive_keywords = {
            "—Ö–æ—Ä–æ—à–æ",
            "–æ—Ç–ª–∏—á–Ω–æ",
            "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
            "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ",
            "—É—Å–ø–µ—Ö",
            "–ø–æ–±–µ–¥–∞",
            "—Ä–æ—Å—Ç",
            "—É–ª—É—á—à–µ–Ω–∏–µ",
            "—Ä–∞–∑–≤–∏—Ç–∏–µ",
            "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ",
        }
        self.negative_keywords = {
            "–ø–ª–æ—Ö–æ",
            "—É–∂–∞—Å–Ω–æ",
            "–ø—Ä–æ–±–ª–µ–º–∞",
            "–∫—Ä–∏–∑–∏—Å",
            "—Å–Ω–∏–∂–µ–Ω–∏–µ",
            "–ø–∞–¥–µ–Ω–∏–µ",
            "—É—Ö—É–¥—à–µ–Ω–∏–µ",
            "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ",
            "—É–ø–∞–¥–æ–∫",
            "–Ω–µ—É–¥–∞—á–∞",
            "–ø—Ä–æ–≤–∞–ª",
        }

    def run_test(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ sentiment –∞–Ω–∞–ª–∏–∑–∞."""
        print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ sentiment...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ sentiment
        texts = [item["text"] for item in data]
        sentiments = [item["sentiment"] for item in data]

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ sentiment
        sentiment_metrics = self._analyze_sentiment_quality(texts, sentiments)

        self.results["metrics"] = sentiment_metrics
        self.results["details"] = {
            "samples_processed": len(data),
            "sentiment_distribution": self._get_sentiment_distribution(sentiments),
        }

        return self.results

    def _analyze_sentiment_quality(
        self, texts: List[str], sentiments: List[str]
    ) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞."""
        accuracy_scores = []
        consistency_scores = []

        for text, sentiment in zip(texts, sentiments):
            if not text or not sentiment:
                continue

            # –¢–æ—á–Ω–æ—Å—Ç—å sentiment (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π)
            accuracy = self._compute_sentiment_accuracy(text, sentiment)
            accuracy_scores.append(accuracy)

            # –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å sentiment
            consistency = self._compute_sentiment_consistency(text, sentiment)
            consistency_scores.append(consistency)

        return {
            "sentiment_accuracy_mean": (
                np.mean(accuracy_scores) if accuracy_scores else 0.0
            ),
            "sentiment_accuracy_std": (
                np.std(accuracy_scores) if accuracy_scores else 0.0
            ),
            "sentiment_consistency_mean": (
                np.mean(consistency_scores) if consistency_scores else 0.0
            ),
            "sentiment_consistency_std": (
                np.std(consistency_scores) if consistency_scores else 0.0
            ),
            "samples_with_sentiment": len(accuracy_scores),
        }

    def _compute_sentiment_accuracy(self, text: str, predicted_sentiment: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ sentiment –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤—Ä–∏—Å—Ç–∏–∫."""
        text_lower = text.lower()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        positive_count = sum(1 for word in self.positive_keywords if word in text_lower)
        negative_count = sum(1 for word in self.negative_keywords if word in text_lower)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π sentiment
        if positive_count > negative_count:
            expected_sentiment = "positive"
        elif negative_count > positive_count:
            expected_sentiment = "negative"
        else:
            expected_sentiment = "neutral"

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º predicted_sentiment
        predicted_lower = predicted_sentiment.lower()
        if any(
            pos in predicted_lower
            for pos in ["positive", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"]
        ):
            predicted_normalized = "positive"
        elif any(
            neg in predicted_lower
            for neg in ["negative", "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"]
        ):
            predicted_normalized = "negative"
        else:
            predicted_normalized = "neutral"

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        if expected_sentiment == predicted_normalized:
            return 1.0
        elif expected_sentiment == "neutral":
            return 0.5  # –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ
        else:
            return 0.0

    def _compute_sentiment_consistency(self, text: str, sentiment: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ sentiment."""
        text_lower = text.lower()
        sentiment_lower = sentiment.lower()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
        positive_count = sum(1 for word in self.positive_keywords if word in text_lower)
        negative_count = sum(1 for word in self.negative_keywords if word in text_lower)

        total_emotional_words = positive_count + negative_count

        if total_emotional_words == 0:
            # –ù–µ—Ç —è–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ - neutral –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω
            if "neutral" in sentiment_lower or "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π" in sentiment_lower:
                return 1.0
            else:
                return 0.5

        # –í—ã—á–∏—Å–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—Å
        emotional_balance = (positive_count - negative_count) / total_emotional_words

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º sentiment
        if emotional_balance > 0.3 and any(
            pos in sentiment_lower for pos in ["positive", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"]
        ):
            return 1.0
        elif emotional_balance < -0.3 and any(
            neg in sentiment_lower for neg in ["negative", "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"]
        ):
            return 1.0
        elif abs(emotional_balance) <= 0.3 and "neutral" in sentiment_lower:
            return 1.0
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            return max(0.0, 1.0 - abs(emotional_balance))

    def _get_sentiment_distribution(self, sentiments: List[str]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è sentiment."""
        sentiment_counts = Counter()

        for sentiment in sentiments:
            if sentiment:
                sentiment_lower = sentiment.lower()
                if any(
                    pos in sentiment_lower
                    for pos in ["positive", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"]
                ):
                    sentiment_counts["positive"] += 1
                elif any(
                    neg in sentiment_lower
                    for neg in ["negative", "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"]
                ):
                    sentiment_counts["negative"] += 1
                else:
                    sentiment_counts["neutral"] += 1

        return dict(sentiment_counts)

    def _generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ sentiment —Ç–µ—Å—Ç–∞."""
        metrics = self.results["metrics"]

        accuracy = metrics.get("sentiment_accuracy_mean", 0)
        consistency = metrics.get("sentiment_consistency_mean", 0)

        return f"Accuracy: {accuracy:.3f}, Consistency: {consistency:.3f}"

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ sentiment."""
        metrics = self.results["metrics"]
        details = self.results["details"]
        recommendations = []

        accuracy = metrics.get("sentiment_accuracy_mean", 0)
        consistency = metrics.get("sentiment_consistency_mean", 0)

        if accuracy < 0.6:
            recommendations.append(
                "–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å sentiment –∞–Ω–∞–ª–∏–∑–∞ - —É–ª—É—á—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏"
            )

        if consistency < 0.7:
            recommendations.append(
                "–ù–∏–∑–∫–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å sentiment - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–∏–∑–∞"
            )

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution = details.get("sentiment_distribution", {})
        total_samples = sum(distribution.values())

        if total_samples > 0:
            neutral_ratio = distribution.get("neutral", 0) / total_samples
            if neutral_ratio > 0.8:
                recommendations.append(
                    "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö sentiment - –≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞"
                )
            elif neutral_ratio < 0.1:
                recommendations.append(
                    "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö sentiment - –≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–∞"
                )

        if accuracy > 0.8 and consistency > 0.8:
            recommendations.append("–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ sentiment –∞–Ω–∞–ª–∏–∑–∞!")

        return recommendations
