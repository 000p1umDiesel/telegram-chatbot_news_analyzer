#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤.
"""

from typing import List, Dict, Any
import numpy as np
import random
from .base_evaluator import BaseEvaluator


class ABPromptTest(BaseEvaluator):
    """–¢–µ—Å—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤."""

    def __init__(self, db_config: dict = None):
        super().__init__(db_config)
        self.prompt_variants = self._define_prompt_variants()

    def _define_prompt_variants(self) -> List[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return [
            {
                "name": "original",
                "description": "–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç",
                "system_prompt": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.",
                "temperature": 0.7,
            },
            {
                "name": "structured",
                "description": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                "system_prompt": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. 
                
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –Ω–æ–≤–æ—Å—Ç—å
2. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã
3. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
4. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)
5. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏""",
                "temperature": 0.5,
            },
            {
                "name": "quality_focused",
                "description": "–ü—Ä–æ–º–ø—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ",
                "system_prompt": """–¢—ã –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫.

–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
- –°–æ—Ö—Ä–∞–Ω—è–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –ò–∑–±–µ–≥–∞–π –¥–æ–º—ã—Å–ª–æ–≤ –∏ —Å–ø–µ–∫—É–ª—è—Ü–∏–π
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö
- –°–æ–∑–¥–∞–≤–∞–π —Ü–µ–Ω–Ω—É—é –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é""",
                "temperature": 0.3,
            },
        ]

    def run_test(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤."""
        print("üîç –ó–∞–ø—É—Å–∫ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        variant_results = {}

        for variant in self.prompt_variants:
            variant_name = variant["name"]
            print(f"  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_name}")

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            quality_score = self._simulate_prompt_quality(variant, data[:10])

            variant_results[variant_name] = {
                "description": variant["description"],
                "quality_score": quality_score,
                "temperature": variant["temperature"],
                "samples_tested": min(len(data), 10),
            }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        best_variant = max(
            variant_results.keys(), key=lambda x: variant_results[x]["quality_score"]
        )

        self.results["metrics"] = {
            "variants_tested": len(variant_results),
            "best_variant": best_variant,
            "best_score": variant_results[best_variant]["quality_score"],
            "variant_results": variant_results,
        }

        self.results["details"] = {
            "samples_processed": min(len(data), 10),
            "variants": variant_results,
        }

        return self.results

    def _simulate_prompt_quality(
        self, variant: Dict[str, Any], sample_data: List[Dict[str, Any]]
    ) -> float:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞."""
        base_score = 0.6

        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
        if "—Å—Ç—Ä—É–∫—Ç—É—Ä" in variant["description"].lower():
            base_score += 0.15

        if "–∫–∞—á–µ—Å—Ç–≤–æ" in variant["description"].lower():
            base_score += 0.12

        # –í–ª–∏—è–Ω–∏–µ temperature
        temp = variant["temperature"]
        if 0.3 <= temp <= 0.5:
            base_score += 0.08
        elif temp > 0.7:
            base_score -= 0.05

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
        variation = random.uniform(-0.1, 0.1)
        final_score = max(0.0, min(1.0, base_score + variation))

        return round(final_score, 3)

    def _generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ A/B —Ç–µ—Å—Ç–∞."""
        metrics = self.results["metrics"]
        best_variant = metrics.get("best_variant", "unknown")
        best_score = metrics.get("best_score", 0)

        return f"–õ—É—á—à–∏–π –ø—Ä–æ–º–ø—Ç: {best_variant} (score: {best_score:.3f})"

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        metrics = self.results["metrics"]
        recommendations = []

        best_variant = metrics.get("best_variant", "")
        best_score = metrics.get("best_score", 0)
        variant_results = metrics.get("variant_results", {})

        if best_score > 0.8:
            recommendations.append(
                f"–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç '{best_variant}'"
            )
        elif best_score > 0.7:
            recommendations.append(
                f"–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–æ–º '{best_variant}', –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π"
            )
        else:
            recommendations.append(
                "–í—Å–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –Ω–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
            )

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        scores = [result["quality_score"] for result in variant_results.values()]
        if len(scores) > 1:
            score_std = np.std(scores)
            if score_std < 0.05:
                recommendations.append(
                    "–†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
                )
            elif score_std > 0.15:
                recommendations.append(
                    "–ë–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–∞–º–∏ - –≤—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ–Ω"
                )

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ temperature
        for variant_name, result in variant_results.items():
            if result["quality_score"] == best_score:
                temp = result["temperature"]
                if temp <= 0.3:
                    recommendations.append(
                        "–ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –º–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–∞"
                    )
                elif temp >= 0.7:
                    recommendations.append(
                        "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ - –º–æ–¥–µ–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞"
                    )

        return recommendations
