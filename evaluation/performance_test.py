#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π.
"""

import argparse
import asyncio
import time
import psutil
import sqlite3
import json
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import gc

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
import sys

sys.path.append(".")

try:
    from services.llm import OllamaAnalyzer
    from services.db.pg_manager import AsyncPostgresManager as DataManager

    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {e}")
    SYSTEM_AVAILABLE = False


class PerformanceTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""

    def __init__(self, db_path: Path = Path("data/storage.db")):
        self.db_path = db_path
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "system_info": self._get_system_info(),
            "tests": {},
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if SYSTEM_AVAILABLE:
            try:
                self.analyzer = OllamaAnalyzer()
                self.data_manager = DataManager(db_path)
                print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
                self.analyzer = None
                self.data_manager = None
        else:
            self.analyzer = None
            self.data_manager = None

    def _get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
        return {
            "cpu_count": psutil.cpu_count(),
            "cpu_count_logical": psutil.cpu_count(logical=True),
            "memory_total_gb": psutil.virtual_memory().total / (1024**3),
            "memory_available_gb": psutil.virtual_memory().available / (1024**3),
            "python_version": sys.version,
            "platform": sys.platform,
        }

    def test_database_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        if not self.db_path.exists():
            return {"status": "failed", "error": "Database not found"}

        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ SELECT –∑–∞–ø—Ä–æ—Å—ã
            start_time = time.time()
            for _ in range(100):
                cursor.execute("SELECT COUNT(*) FROM messages")
                cursor.fetchone()
            simple_select_time = time.time() - start_time

            # –¢–µ—Å—Ç 2: JOIN –∑–∞–ø—Ä–æ—Å—ã
            start_time = time.time()
            for _ in range(50):
                cursor.execute(
                    """
                    SELECT m.message_id, m.text, a.summary 
                    FROM messages m 
                    JOIN analyses a ON m.message_id = a.message_id 
                    LIMIT 10
                """
                )
                cursor.fetchall()
            join_select_time = time.time() - start_time

            # –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            start_time = time.time()
            for _ in range(20):
                cursor.execute(
                    """
                    SELECT channel_id, COUNT(*), AVG(LENGTH(text))
                    FROM messages 
                    WHERE LENGTH(text) > 100 
                    GROUP BY channel_id
                """
                )
                cursor.fetchall()
            complex_select_time = time.time() - start_time

            conn.close()

            results = {
                "status": "passed",
                "simple_select_avg_ms": (simple_select_time / 100) * 1000,
                "join_select_avg_ms": (join_select_time / 50) * 1000,
                "complex_select_avg_ms": (complex_select_time / 20) * 1000,
                "total_test_time": simple_select_time
                + join_select_time
                + complex_select_time,
            }

            print(f"  üìä –ü—Ä–æ—Å—Ç—ã–µ SELECT: {results['simple_select_avg_ms']:.2f}ms")
            print(f"  üìä JOIN –∑–∞–ø—Ä–æ—Å—ã: {results['join_select_avg_ms']:.2f}ms")
            print(f"  üìä –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {results['complex_select_avg_ms']:.2f}ms")

            return results

        except Exception as e:
            return {"status": "failed", "error": str(e)}

    def test_llm_performance(self, samples: int = 20) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å LLM –∞–Ω–∞–ª–∏–∑–∞."""
        print(f"\nüîç –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LLM ({samples} –æ–±—Ä–∞–∑—Ü–æ–≤)")

        if not self.analyzer:
            return {"status": "skipped", "reason": "LLM analyzer not available"}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = self._get_test_texts(samples)
        if not test_texts:
            return {"status": "failed", "reason": "No test texts available"}

        analysis_times = []
        successful_analyses = 0
        failed_analyses = 0

        print(f"  üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
        start_total_time = time.time()

        for i, text in enumerate(test_texts):
            if i % 5 == 0:
                print(f"  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤...")

            start_time = time.time()
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                result = asyncio.run(self.analyzer.analyze_message(text))
                analysis_time = time.time() - start_time

                if result:
                    analysis_times.append(analysis_time)
                    successful_analyses += 1
                else:
                    failed_analyses += 1

            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ {i}: {e}")
                failed_analyses += 1

        total_time = time.time() - start_total_time

        if analysis_times:
            results = {
                "status": "passed",
                "samples_processed": len(analysis_times),
                "successful_analyses": successful_analyses,
                "failed_analyses": failed_analyses,
                "avg_analysis_time": sum(analysis_times) / len(analysis_times),
                "min_analysis_time": min(analysis_times),
                "max_analysis_time": max(analysis_times),
                "total_time": total_time,
                "throughput_per_minute": (len(analysis_times) / total_time) * 60,
                "success_rate": successful_analyses
                / (successful_analyses + failed_analyses),
            }

            print(f"  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {results['avg_analysis_time']:.2f}—Å")
            print(
                f"  üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {results['throughput_per_minute']:.1f} –∞–Ω–∞–ª–∏–∑–æ–≤/–º–∏–Ω"
            )
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1%}")

            return results
        else:
            return {"status": "failed", "reason": "No successful analyses"}

    def _get_test_texts(self, limit: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if not self.db_path.exists():
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return [
                "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞. "
                * 10,
                "–î—Ä—É–≥–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. "
                * 8,
                "–¢—Ä–µ—Ç–∏–π –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞. "
                * 12,
            ] * (limit // 3 + 1)

        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.execute(
                """
                SELECT text FROM messages 
                WHERE LENGTH(text) > 100 AND LENGTH(text) < 2000
                ORDER BY RANDOM() LIMIT ?
            """,
                (limit,),
            )

            texts = [row[0] for row in cursor.fetchall()]
            conn.close()
            return texts

        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {e}")
            return []

    def run_performance_tests(self, samples: int = 20) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"üìä –û–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è LLM —Ç–µ—Å—Ç–æ–≤: {samples}")
        print("=" * 50)

        start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.results["tests"]["database_performance"] = self.test_database_performance()
        self.results["tests"]["llm_performance"] = self.test_llm_performance(samples)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        self.results["execution_summary"] = {
            "total_execution_time": total_time,
            "tests_run": len(self.results["tests"]),
            "tests_passed": sum(
                1
                for test in self.results["tests"].values()
                if test.get("status") == "passed"
            ),
            "tests_failed": sum(
                1
                for test in self.results["tests"].values()
                if test.get("status") == "failed"
            ),
            "tests_skipped": sum(
                1
                for test in self.results["tests"].values()
                if test.get("status") == "skipped"
            ),
        }

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\n" + "=" * 50)
        print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        summary = self.results["execution_summary"]
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_execution_time']:.1f}—Å")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {summary['tests_passed']}")
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['tests_failed']}")
        print(f"‚è≠Ô∏è –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {summary['tests_skipped']}")

        return self.results

    def save_results(self, output_path: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)

        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")


def main():
    parser = argparse.ArgumentParser(
        description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"
    )

    parser.add_argument(
        "--samples",
        type=int,
        default=20,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è LLM —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)",
    )

    parser.add_argument(
        "--db", type=Path, default=Path("data/storage.db"), help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    )

    parser.add_argument(
        "--output",
        type=Path,
        default=Path("evaluation/performance_results.json"),
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
    )

    args = parser.parse_args()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    tester = PerformanceTester(args.db)
    results = tester.run_performance_tests(samples=args.samples)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.save_results(args.output)

    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
