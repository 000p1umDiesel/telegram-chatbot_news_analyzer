# main.py
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω–æ–π
# –ï–¥–∏–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ core/config.py

from logger import get_logger
from core.config import settings as config
from services.db.pg_manager import AsyncPostgresManager
from services import telegram_monitor
from bot import dp, bot
from services.simple_health_check import simple_health_check
from monitoring_service import MonitoringService

logger = get_logger()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
data_manager = None


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    """
    global data_manager

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î (Postgres) - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    data_manager = await AsyncPostgresManager.create()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π data_manager –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    import services

    services.data_manager = data_manager

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º data_manager –¥–ª—è telegram_monitor
    telegram_monitor.set_data_manager(data_manager)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if not await telegram_monitor.connect():
        logger.error(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
    valid_channels = await telegram_monitor.validate_all_channels(config.channel_ids)
    if not valid_channels:
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    # –ó–∞–¥–∞—á–∏ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks = []

    # Telegram –±–æ—Ç
    bot_task = asyncio.create_task(dp.start_polling(bot), name="telegram_bot")
    tasks.append(bot_task)

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
    monitoring_service = MonitoringService(bot, data_manager)
    monitoring_task = asyncio.create_task(
        monitoring_service.run(), name="channel_monitoring"
    )
    tasks.append(monitoring_task)

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    health_task = asyncio.create_task(
        simple_health_check.run_periodic_check(interval_minutes=10),
        name="simple_health_monitor",
    )
    tasks.append(health_task)

    logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:")
    logger.info("  ü§ñ Telegram –±–æ—Ç")
    logger.info("  üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤")
    logger.info("  üè• –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info(f"  üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {len(valid_channels)}")

    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
        if telegram_monitor:
            await telegram_monitor.disconnect()  # type: ignore

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if data_manager:
            try:
                await data_manager.close()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == "__main__":
    try:
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.critical(
            f"üíÄ –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True
        )
