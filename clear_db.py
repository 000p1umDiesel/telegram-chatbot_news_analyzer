#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL.
"""

import asyncio
import sys
from services.db.pg_manager import AsyncPostgresManager
from logger import get_logger

logger = get_logger()


async def clear_database():
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üóëÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        data_manager = await AsyncPostgresManager.create()

        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        tables_to_clear = ["messages", "analyses", "llm_calls", "channels"]

        print(f"üìã –ë—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables_to_clear)}")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! (y/N): ")
        if confirm.lower() != "y":
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with data_manager.pool.acquire() as conn:
            for table in tables_to_clear:
                await conn.execute(f"TRUNCATE TABLE {table}")
                print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")

        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with data_manager.pool.acquire() as conn:
            subscribers_count = await conn.fetchval(
                "SELECT COUNT(*) FROM subscribers WHERE is_active = TRUE"
            )
            print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
        sys.exit(1)
    finally:
        if "data_manager" in locals():
            await data_manager.close()


async def clear_subscribers():
    """–û—á–∏—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–û–ü–ê–°–ù–û!)."""
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")

    confirm = input("–í—ã –¢–û–ß–ù–û —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'DELETE ALL': ")
    if confirm != "DELETE ALL":
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    try:
        data_manager = await AsyncPostgresManager.create()

        async with data_manager.pool.acquire() as conn:
            await conn.execute("TRUNCATE TABLE user_settings")
            await conn.execute("TRUNCATE TABLE subscribers")

        print("üóëÔ∏è –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    finally:
        if "data_manager" in locals():
            await data_manager.close()


async def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î."""
    try:
        data_manager = await AsyncPostgresManager.create()

        async with data_manager.pool.acquire() as conn:
            messages_count = await conn.fetchval("SELECT COUNT(*) FROM messages")
            analyses_count = await conn.fetchval("SELECT COUNT(*) FROM analyses")
            llm_calls_count = await conn.fetchval("SELECT COUNT(*) FROM llm_calls")
            subscribers_count = await conn.fetchval(
                "SELECT COUNT(*) FROM subscribers WHERE is_active = TRUE"
            )
            channels_count = await conn.fetchval("SELECT COUNT(*) FROM channels")

        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  üì∞ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
        print(f"  üîç –ê–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}")
        print(f"  ü§ñ LLM –≤—ã–∑–æ–≤–æ–≤: {llm_calls_count}")
        print(f"  üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        print(f"  üì∫ –ö–∞–Ω–∞–ª–æ–≤: {channels_count}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        if "data_manager" in locals():
            await data_manager.close()


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python clear_db.py stats        - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  python clear_db.py clear        - –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
        print(
            "  python clear_db.py clear-all    - –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
        )
        sys.exit(1)

    command = sys.argv[1]

    if command == "stats":
        asyncio.run(show_stats())
    elif command == "clear":
        asyncio.run(clear_database())
    elif command == "clear-all":
        asyncio.run(clear_database())
        asyncio.run(clear_subscribers())
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)
