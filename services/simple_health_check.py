"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
"""

import asyncio
import time
from datetime import datetime
from logger import get_logger
from services import data_manager

logger = get_logger()


class SimpleHealthCheck:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self):
        self.start_time = time.time()
        self.last_check = None

    def check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            with data_manager._lock, data_manager.conn:
                cursor = data_manager.conn.execute("SELECT 1")
                result = cursor.fetchone()
                return result is not None
        except Exception:
            return False

    def get_uptime_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö."""
        return (time.time() - self.start_time) / 3600

    def get_basic_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        try:
            subscribers = len(data_manager.get_all_subscribers())
        except Exception:
            subscribers = 0

        return {
            "uptime_hours": self.get_uptime_hours(),
            "database_ok": self.check_database(),
            "subscribers_count": subscribers,
            "last_check": datetime.now().isoformat(),
        }

    async def run_periodic_check(self, interval_minutes: int = 10):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É."""
        logger.info(
            f"üè• –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω)"
        )

        while True:
            try:
                stats = self.get_basic_stats()
                self.last_check = datetime.now()

                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                if not stats["database_ok"]:
                    logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ —á–∞—Å
                    if int(stats["uptime_hours"]) % 1 == 0:
                        logger.info(
                            f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç {stats['uptime_hours']:.1f}—á, –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['subscribers_count']}"
                        )

                await asyncio.sleep(interval_minutes * 60)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
simple_health_check = SimpleHealthCheck()
